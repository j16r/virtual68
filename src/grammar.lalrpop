// -*- mode: rust -*-
// vi: set ft=rust :

use std::str::FromStr;
use ast::{Register, Operation, Instruction, Place};

grammar;

pub Program: Vec<Instruction> = {
    <v:(<Instruction> ";")*> <e:Instruction?> => match e {
        None => v,
        Some(e) => {
            println!("Got {:?}, {:?}", e, v);
            let mut v = v;
            v.push(e);
            v
        }
    }
};

Instruction: Instruction = {
    <op:Operation> <lhs:Place> <rhs:Place> => match op {
        Operation::Mov => Instruction::Mov(lhs, rhs),
        _ => panic!("wrong number of arguments for opcode"),
    },
    <op:Operation> <arg:Place> => match op {
        Operation::Push => Instruction::Push(arg),
        Operation::Pop => Instruction::Pop(arg),
        _ => panic!("wrong number of arguments for opcode"),
    },
    <op:Operation> => match op {
        Operation::NOP => Opcode::NOP,
        Operation::TAP => Opcode::TAP,
        Operation::TPA => Opcode::TPA,
        Operation::INX => Opcode::INX,
        Operation::DEX => Opcode::DEX,
        Operation::CLV => Opcode::CLV,
        Operation::SEV => Opcode::SEV,
        Operation::CLC => Opcode::CLC,
        Operation::SEC => Opcode::SEC,
        Operation::CLI => Opcode::CLI,
        Operation::SEI => Opcode::SEI,
        Operation::SBA => Opcode::SBA,
        Operation::CBA => Opcode::CBA,
        Operation::TAB => Opcode::TAB,
        Operation::TBA => Opcode::TBA,
        Operation::DAA => Opcode::DAA,
        Operation::ABA => Opcode::ABA,
        Operation::TSX => Opcode::TSX,
        Operation::INS => Opcode::INS,
        Operation::DES => Opcode::DES,
        Operation::TXS => Opcode::TXS,
        Operation::RTS => Opcode::RTS,
        Operation::RTI => Opcode::RTI,
        Operation::WAI => Opcode::WAI,
        Operation::SWI => Opcode::SWI,
        Operation::NEG => Opcode::NEG,
        _ => panic!("wrong number of arguments for opcode"),
    }
};

Operation: Operation = <r"[a-z]+"> =>
match <> {
    "aba" => Operation::ABA,
    "adc" => Operation::ADC,
    "add" => Operation::ADD,
    "and" => Operation::AND,
    "aoc" => Operation::AOC,
    "asl" => Operation::ASL,
    "asr" => Operation::ASR,
    "bcc" => Operation::BCC,
    "bcs" => Operation::BCS,
    "beq" => Operation::BEQ,
    "bge" => Operation::BGE,
    "bgt" => Operation::BGT,
    "bhi" => Operation::BHI,
    "bit" => Operation::BIT,
    "ble" => Operation::BLE,
    "bls" => Operation::BLS,
    "blt" => Operation::BLT,
    "bmi" => Operation::BMI,
    "bne" => Operation::BNE,
    "bpl" => Operation::BPL,
    "bra" => Operation::BRA,
    "bsr" => Operation::BSR,
    "bvc" => Operation::BVC,
    "bvs" => Operation::BVS,
    "cba" => Operation::CBA,
    "clc" => Operation::CLC,
    "cli" => Operation::CLI,
    "clr" => Operation::CLR,
    "clv" => Operation::CLV,
    "cmp" => Operation::CMP,
    "com" => Operation::COM,
    "cpx" => Operation::CPX,
    "daa" => Operation::DAA,
    "dec" => Operation::DEC,
    "des" => Operation::DES,
    "dex" => Operation::DEX,
    "dor" => Operation::DOR,
    "eor" => Operation::EOR,
    "inc" => Operation::INC,
    "ins" => Operation::INS,
    "inx" => Operation::INX,
    "jmp" => Operation::JMP,
    "jsr" => Operation::JSR,
    "lda" => Operation::LDA,
    "lds" => Operation::LDS,
    "ldx" => Operation::LDX,
    "lsr" => Operation::LSR,
    "neg" => Operation::NEG,
    "nop" => Operation::NOP,
    "ora" => Operation::ORA,
    "psh" => Operation::PSH,
    "pul" => Operation::PUL,
    "rol" => Operation::ROL,
    "ror" => Operation::ROR,
    "rti" => Operation::RTI,
    "rts" => Operation::RTS,
    "sba" => Operation::SBA,
    "sbc" => Operation::SBC,
    "sec" => Operation::SEC,
    "sei" => Operation::SEI,
    "sev" => Operation::SEV,
    "sta" => Operation::STA,
    "sts" => Operation::STS,
    "stx" => Operation::STX,
    "sub" => Operation::SUB,
    "swi" => Operation::SWI,
    "tab" => Operation::TAB,
    "tap" => Operation::TAP,
    "tba" => Operation::TBA,
    "tpa" => Operation::TPA,
    "tst" => Operation::TST,
    "tsx" => Operation::TSX,
    "txs" => Operation::TXS,
    op => panic!("unrecognized opcode {:?}", op),
};

Place: Place = {
    <r:Register> => Place::Register(r),
    <v:Num> => Place::Value(v)
};

Register: Register = <r"[a-z]+"> => match <> {
    "acca" => Register::ACCA,
    "accb" => Register::ACCB,
    "ix" => Register::IX,
    "pc" => Register::PC,
    "sp" => Register::SP,
    "cc" => Register::CC,
    reg => panic!("unrecognized register {:?}", reg),
};

Num: u8 = <r"[0-9]+"> => u8::from_str(<>).unwrap();
