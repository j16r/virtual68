// -*- mode: rust -*-
// vi: set ft=rust :

use std::str::FromStr;
use ast::{Register, Operation, Instruction, Place};

grammar;

pub Program: Vec<Instruction> = {
    <v:(<Instruction> ";")*> <e:Instruction?> => match e {
        None => v,
        Some(e) => {
            println!("Got {:?}, {:?}", e, v);
            let mut v = v;
            v.push(e);
            v
        }
    }
};

Instruction: Instruction = {
    <op:Operation> <lhs:Place> <rhs:Place> => match op {
        Operation::Mov => Instruction::Mov(lhs, rhs),
        _ => panic!("wrong number of arguments for opcode"),
    },
    <op:Operation> <arg:Place> => match op {
        Operation::Push => Instruction::Push(arg),
        Operation::Pop => Instruction::Pop(arg),
        _ => panic!("wrong number of arguments for opcode"),
    },
    <op:Operation> => match op {
        Operation::Nop => Instruction::Nop,
        _ => panic!("wrong number of arguments for opcode"),
    }
};

Operation: Operation = <r"[a-z]+"> =>
match <> {
    "nop" => Operation::Nop,
    "push" => Operation::Push,
    "pop" => Operation::Pop,
    "mov" => Operation::Mov,
    op => panic!("unrecognized opcode {:?}", op),
};

Place: Place = {
    <r:Register> => Place::Register(r),
    <v:Num> => Place::Value(v)
};

Register: Register = <r"[a-z]+"> => match <> {
    "acca" => Register::ACCA,
    "accb" => Register::ACCB,
    "ix" => Register::IX,
    "pc" => Register::PC,
    "sp" => Register::SP,
    "cc" => Register::CC,
    reg => panic!("unrecognized register {:?}", reg),
};

Num: u8 = <r"[0-9]+"> => u8::from_str(<>).unwrap();
